class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& g, vector<int>& a) 
    {
        int n=g.size();
        vector<vector<int>>adj(n);
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(i!=j && g[i][j])
                {
                    adj[i].push_back(j);
                }
            }
        }

        // for(auto x:adj)
        // {
        //     for(auto y:x)
        //     {
        //         cout<<y<<" ";
        //     }
        //     cout<<endl;
        // }

        int ans=INT_MAX;
        int mini=-1;
        for(auto x:a)
        {
            vector<int>vis(n,0);
            queue<int>q1;
            for(auto z:a)
            {
                if(z!=x)
                {
                    vis[z]=1;
                    q1.push(z);
                }
            }
            int res=0;
            while(!q1.empty())
            {
                int in=q1.front();
                q1.pop();
                res++;
                for(auto z:adj[in])
                {
                    if(z!=x && vis[z]==0)
                    {
                        vis[z]=1;
                        q1.push(z);
                    }
                }
            }
            if(res<ans)
            {
                ans=res;
                mini=x;
            }
            else if(res==ans)
            {
                mini=min(mini,x);
            }
            //cout<<x<<" "<<res<<endl;
        }
        return mini;
    }
};
